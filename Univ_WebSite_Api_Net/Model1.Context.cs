//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Univ_WebSite_Api_Net
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class UnivEntities : DbContext
    {
        public UnivEntities()
            : base("name=UnivEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Class> Classes { get; set; }
        public virtual DbSet<Grade> Grades { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<Teacher> Teachers { get; set; }
    
        public virtual int spClassDelete(Nullable<int> classID)
        {
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClassDelete", classIDParameter);
        }
    
        public virtual int spClassUpdate(Nullable<int> classID, string name, Nullable<short> capacity, Nullable<bool> isFull, Nullable<System.DateTime> beginDate, Nullable<System.DateTime> endDate, Nullable<int> teacherID, Nullable<int> lessonID, Nullable<int> gradeID)
        {
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var capacityParameter = capacity.HasValue ?
                new ObjectParameter("Capacity", capacity) :
                new ObjectParameter("Capacity", typeof(short));
    
            var isFullParameter = isFull.HasValue ?
                new ObjectParameter("IsFull", isFull) :
                new ObjectParameter("IsFull", typeof(bool));
    
            var beginDateParameter = beginDate.HasValue ?
                new ObjectParameter("BeginDate", beginDate) :
                new ObjectParameter("BeginDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var teacherIDParameter = teacherID.HasValue ?
                new ObjectParameter("TeacherID", teacherID) :
                new ObjectParameter("TeacherID", typeof(int));
    
            var lessonIDParameter = lessonID.HasValue ?
                new ObjectParameter("LessonID", lessonID) :
                new ObjectParameter("LessonID", typeof(int));
    
            var gradeIDParameter = gradeID.HasValue ?
                new ObjectParameter("GradeID", gradeID) :
                new ObjectParameter("GradeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClassUpdate", classIDParameter, nameParameter, capacityParameter, isFullParameter, beginDateParameter, endDateParameter, teacherIDParameter, lessonIDParameter, gradeIDParameter);
        }
    
        public virtual int spPersonInsert(string name, string family, Nullable<System.DateTime> birthDate, Nullable<bool> sex, string picture)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var birthDateParameter = birthDate.HasValue ?
                new ObjectParameter("BirthDate", birthDate) :
                new ObjectParameter("BirthDate", typeof(System.DateTime));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            var pictureParameter = picture != null ?
                new ObjectParameter("Picture", picture) :
                new ObjectParameter("Picture", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPersonInsert", nameParameter, familyParameter, birthDateParameter, sexParameter, pictureParameter);
        }
    
        public virtual int spPrsonInsert2(string name, string family, Nullable<bool> sex)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var familyParameter = family != null ?
                new ObjectParameter("Family", family) :
                new ObjectParameter("Family", typeof(string));
    
            var sexParameter = sex.HasValue ?
                new ObjectParameter("Sex", sex) :
                new ObjectParameter("Sex", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spPrsonInsert2", nameParameter, familyParameter, sexParameter);
        }
    }
}
